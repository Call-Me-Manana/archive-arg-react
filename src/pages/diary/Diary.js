import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import "./Diary.css";

export default function Diary() {
    const [logs, setLogs] = useState([
        "üìì –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ (–∑–∞–ø–∏—Å—å 001)",
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ('help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥):",
    ]);
    const [input, setInput] = useState("");
    const [progress, setProgress] = useState(0); // —à–∞–≥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const [secretRevealed, setSecretRevealed] = useState(false);
    const containerRef = useRef(null);
    const navigate = useNavigate();
    const [glitch, setGlitch] = useState(false);
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
    const correctSequence = [
        "scan",
        "analyze",
        "scan",
        "decode",
        "decode",
        "extract",
        "confirm",
    ];

    const handleCommand = () => {
        const cmd = input.toLowerCase().trim();
        let newLog = [...logs, `> ${cmd}`];

        if (cmd === "help") {
            newLog.push(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: scan, analyze, decode, extract, confirm"
            );
        } else if (cmd === correctSequence[progress]) {
            newLog.push(`–ö–æ–º–∞–Ω–¥–∞ '${cmd}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`);
            const nextProgress = progress + 1;
            setProgress(nextProgress);

            // –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if (nextProgress === correctSequence.length) {
                newLog.push("–í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–µ–∫—Ä–µ—Ç.");
                newLog.push("–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞...");
                setSecretRevealed(true);
                downloadDiaryFragment();
            }
        } else {
            newLog.push("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!");
            newLog.push("‚ö° –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            setProgress(0); // —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            triggerGlitch();
        }

        setLogs(newLog);
        setInput("");
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤
    useEffect(() => {
        if (containerRef.current) {
            containerRef.current.scrollTop = containerRef.current.scrollHeight;
        }
    }, [logs]);

    const handleNextLevel = () => {
        navigate("/diary-final");
    };

    const triggerGlitch = () => {
        setGlitch(true);
        setTimeout(() => setGlitch(false), 600);
    };

    const downloadDiaryFragment = () => {
        const text = `
üìì –î–Ω–µ–≤–Ω–∏–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è (—Ñ—Ä–∞–≥–º–µ–Ω—Ç 001)
----------------------------------------
...12 –æ–∫—Ç—è–±—Ä—è. 
–Ø –Ω–∞–∫–æ–Ω–µ—Ü —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –û–Ω–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–¥–æ–º, –∞ –∫–ª—é—á–æ–º –∫ –¥—Ä—É–≥–æ–π –∑–∞–ø–∏—Å–∏.
–ù–æ —Å–∏–≥–Ω–∞–ª –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —É—Ç—Ä–∞—á–µ–Ω–∞.

–°–ª–µ–¥—É—é—â–∏–π —Å–ª–µ–¥ —Å–∫—Ä—ã—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ ARCHIVE.
----------------------------------------
(–∫–æ–Ω–µ—Ü —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞)
        `.trim();

        const blob = new Blob([text], { type: "text/plain;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "diary_fragment_001.txt";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    return (
        <div className="diary-container">
            <div
                className={`diary-terminal ${glitch ? "glitch" : ""}`}
                ref={containerRef}
            >
                {logs.map((line, i) => (
                    <p
                        key={i}
                        className={
                            line.includes("‚úÖ")
                                ? "success"
                                : line.includes("‚ö†Ô∏è")
                                ? "error"
                                : ""
                        }
                    >
                        {line}
                    </p>
                ))}

                {!secretRevealed && (
                    <div className="terminal-input">
                        <span>&gt;</span>
                        <input
                            type="text"
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyDown={(e) =>
                                e.key === "Enter" && handleCommand()
                            }
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
                            autoFocus
                        />
                    </div>
                )}

                {secretRevealed && (
                    <p className="success">
                        –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!
                    </p>
                )}
                {secretRevealed && (
                    <div className="next-level">
                        <p className="success">
                            üóù –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø.
                        </p>
                        <button className="next-btn" onClick={handleNextLevel}>
                            –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
}
